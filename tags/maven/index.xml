<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maven on Kyle Lieber</title>
    <link>/tags/maven/</link>
    <description>Recent content in Maven on Kyle Lieber</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Sep 2018 23:59:43 -0500</lastBuildDate>
    
	<atom:link href="/tags/maven/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Generate OpenAPI Specs with Spring REST Docs</title>
      <link>/2018/09/restdocs-spec/</link>
      <pubDate>Fri, 21 Sep 2018 23:59:43 -0500</pubDate>
      
      <guid>/2018/09/restdocs-spec/</guid>
      <description>Many of the teams at my organization began using Spring REST Docs to document our REST APIs over the last couple of years. We really like the freedom it gives you to design your documentation as you wish while still giving you reliable snippets that are validated through tests. Of course, the only thing its missing is the ability to generate an API specification document like OpenAPI. This recently became a requirement that we are able to provide such a document so many thought we would need to abandon Spring REST Docs.</description>
    </item>
    
    <item>
      <title>PhantomJS Maven Plugin 0.3</title>
      <link>/2014/05/phantomjs-maven-plugin-0-dot-3/</link>
      <pubDate>Fri, 02 May 2014 00:00:00 +0000</pubDate>
      
      <guid>/2014/05/phantomjs-maven-plugin-0-dot-3/</guid>
      <description>&lt;p&gt;I just released &lt;a href=&#34;https://github.com/klieber/phantomjs-maven-plugin/releases/tag/phantomjs-maven-plugin-0.3&#34;&gt;version 0.3&lt;/a&gt; of the &lt;a href=&#34;http://kylelieber.com/phantomjs-maven-plugin&#34;&gt;phantomjs-maven-plugin&lt;/a&gt; and I thought it was about time I wrote a blog post about this project.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://phantomjs.org&#34;&gt;PhantomJS&lt;/a&gt; is a headless WebKit implementation that is extremely useful for tasks like headless website testing, screen capture, page automation, network monitoring, and more. Much of my experience with PhantomJS comes from my work on the &lt;a href=&#34;http://searls.github.io/jasmine-maven-plugin&#34;&gt;jasmine-maven-plugin&lt;/a&gt;.  In version &lt;code&gt;1.3.1.1&lt;/code&gt; of the plugin we added support for using PhantomJS instead of &lt;a href=&#34;http://htmlunit.sourceforge.com&#34;&gt;HtmlUnit&lt;/a&gt; to execute &lt;a href=&#34;http://jasmine.github.io/&#34;&gt;Jasmine&lt;/a&gt; specs. The only downside to using PhantomJS with the plugin is that you had to have PhantomJS already installed on your system. For those of us in the Maven world that seems a little odd since Maven is suppose to download all of our dependencies for us. But of course, usually those dependencies are platform-independent java libraries. PhantomJS, on the other hand, requires install platform-dependent compiled binaries.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jasmine Maven Plugin 1.3.1.0 - My First Release</title>
      <link>/2013/03/jasmine-maven-plugin-1-3-1-0-my-first-release/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013/03/jasmine-maven-plugin-1-3-1-0-my-first-release/</guid>
      <description>&lt;p&gt;I began using the the &lt;a href=&#34;http://searls.github.com/jasmine-maven-plugin&#34;&gt;Jasmine Maven Plugin&lt;/a&gt; in June of 2012 and was immediately impressed with how well it worked and how easy it made automating my test execution. Soon after I discovered &lt;a href=&#34;http://requirejs.org&#34;&gt;require.js&lt;/a&gt; and decided to begin using it in my applications. I learned quickly however that the require.js support in the Jasmine Maven Plugin had quite a few issues and so I decided to try and help fix some of them.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Maven Versioning Strategy</title>
      <link>/2012/06/maven-versioning-strategy/</link>
      <pubDate>Mon, 25 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012/06/maven-versioning-strategy/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been having a lot of discussions with analysts in my organization about how to version software using Maven and I&amp;rsquo;m finding there is a common misconception about what SNAPSHOT actually means. I&amp;rsquo;ve been looking for a good blog to send them that helps explain versioning in Maven but unfortunately everything I&amp;rsquo;ve found merely discusses version formats and not how to use them as you&amp;rsquo;re developing an application. So, I decided I would take a stab at it. I welcome any comments and constructive criticism that will help me improve this document, so please feel free.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Avoid Absolute File Path When Using the cxf-codegen-plugin</title>
      <link>/2012/03/avoid-absolute-file-path-when-using-the-cxf-codegen-plugin/</link>
      <pubDate>Fri, 30 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012/03/avoid-absolute-file-path-when-using-the-cxf-codegen-plugin/</guid>
      <description>&lt;p&gt;I ran into this problem a few months ago and scoured the internet for solution but never found one until now. So hopefully this will be helpful to someone with the same problem. By default, the &lt;a href=&#34;http://cxf.apache.org/docs/maven-cxf-codegen-plugin-wsdl-to-java.html&#34;&gt;Apache CXF Codegen Maven plugin&lt;/a&gt; generates code that will attempt to read your wsdl via the absolute path.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>